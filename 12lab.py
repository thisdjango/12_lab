"""
+ 1. Создать квадратную матрицу размера 4 на 4.
+ 2. Матрица заполняется 2.1 "двузначными шестнадцатеричными" числами,
+ 3. которые могут как вводиться вручную,
+ 4. так и генерироваться случайно.
+ 5. Отсортировать столбцы с нечетными номерами по возрастанию,
+ 6. а с четными по убыванию
+ 7. при помощи алгоритма пузырьковой сортировки.
+ 8. Результаты преобразований вывести на экран.
"""
import numpy as np


def bubble(param, increase):
    """
    Функция пузырьковой сортировки одномерного массива.
    параметры:
        - param одномерный массив
        - increase True - возрастание / False - убывание
    переменные:
        - loc_n последовательность от 0 до длины массива - 2 включая оба конца
    условия:
        - (param[j] > param[j + 1] and increase) если по возрастанию и следующий больше текущего
        - или
        - (not increase and param[j] < param[j + 1]) если по убыванию и следующий меньше текущего
    действия:
        - param[j], param[j + 1] = param[j + 1], param[j] обмен значениями
    результат работы:
        - params отсортированный необходимым способом массив
    """
    loc_n = range(len(param) - 1)
    for i in loc_n:
        for j in loc_n:
            if (param[j] > param[j + 1] and increase) or \
                    (not increase and param[j] < param[j + 1]):
                param[j], param[j + 1] = param[j + 1], param[j]
    return param


def require():
    """
    Рекурсивная функция требования нужного ответа от пользователя.
    переменные:
        - choice строка от пользователя - его выбор
        - arr двумерный массив по умолчанию рандомный
        - variants массив вариантов выбора
        - n число строк и столбоцов
    условия:
        - choice == 'ввести' если пользователь выбрал ввод
        - choice not in variants иначе если нет нужного ответа
    действия:
        - arr = [input().split() for _ in range(n)] ввод значений через генератор списков
        - arr = require() возврат к функции из-за неверного ответа
    результат работы:
        - arr необходимый массив
    """
    print('Желаете ввести или использовать рандомные значения?(ввести/рандом)')
    choice = input().lower()
    variants = ['ввести', 'рандом']
    n = 4
    arr = [[hex(randint(16, 255)).split('x')[-1] for x in range(n)] for _ in range(n)]
    if choice == variants[0]:
        arr = [input().split() for _ in range(n)]
    elif choice not in variants:
        arr = require()
    return arr


arr = require()     # двумерный массив пользователя
print(arr)  # вывести этот массив
arr = [[int(x, 16) for x in _] for _ in arr]    # двузначные шестнадцатеричные в целочисленные
arr = np.array(arr)     # обычный лист в лист типа np.array
odd = arr[:, 1::2]      # отрезать от массива только нечётные столбцы, используя слайсы
even = arr[:, ::2]      # отрезать от массива только чётные столбцы, используя слайсы
for d in odd.T:         # проход по строкам транспонированной матрицы, тоже что проход по столбцам
    d = bubble(d, True) # отсортировать пузырьковой сортировкой
for v in even.T:        # проход по строкам транспонированной матрицы, тоже что проход по столбцам
    v = bubble(v, False)# отсортировать пузырьковой сортировкой
arr = arr.astype(str)   # перевести тип матрицы из целочисленного в строковый
arr[:, 1::2] = [[hex(x).split('x')[-1] for x in _] for _ in odd]    # перевести каждое число в 16 сс и записать в массив
arr[:, ::2] = [[hex(x).split('x')[-1] for x in _] for _ in even]    # перевести каждое число в 16 сс и записать в массив
print(arr)      # вывести отсортированный массив

